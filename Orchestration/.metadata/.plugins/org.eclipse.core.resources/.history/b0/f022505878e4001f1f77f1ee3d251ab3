package com.programming.frontendorchestration.service;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.RestTemplate;

import com.programming.frontendorchestration.model.CartItems;
import com.programming.frontendorchestration.model.CartRequest;
import com.programming.frontendorchestration.model.Product;
import com.programming.frontendorchestration.model.ProductId;

@Service
public class CartService {

	@Autowired
	private RestTemplate restTemplate;
	private final String User_SERVICE_URL = "http://user-service/auth";
	private final String CART_SERVICE_URL = "http://cart-service/cart";
	private final String PRODUCT_SERVICE_URL = "http://product-service/product";

	public ResponseEntity<?> addToCart(String token,CartRequest req) {
		String url = CART_SERVICE_URL + "/add";
		CartRequest cartRes = restTemplate.getForObject(User_SERVICE_URL + "/validate?token=" + token,CartRequest.class);
		req.setUserId(cartRes.getUserId());
		return restTemplate.postForEntity(url, req, String.class);
	}

	public List<Product> getCartItems(String token) {
		try { 
			CartRequest cartRes = restTemplate.getForObject(User_SERVICE_URL + "/validate?token=" + token,CartRequest.class);
			CartItems[] items = restTemplate.getForObject(CART_SERVICE_URL+"/"+cartRes.getUserId(), CartItems[].class);
			List<Product> products = new ArrayList<Product>();
			if (items != null) {
				for (CartItems item : items) {
					Product product = restTemplate.getForObject(PRODUCT_SERVICE_URL + "/get/"
							+ item.getProductId().getCategoryId() + "/" + item.getProductId().getProductId(),
							Product.class);
					product.setQuantity(item.getQuantity());
					products.add(product);
				}
			}
			return products;
		} catch (RestClientException e) {
			e.printStackTrace();
			return Collections.emptyList();
		}
	}

	public ResponseEntity<?> updateQuantity(String token, CartRequest req) {
	    String url = CART_SERVICE_URL + "/update-quantity";
	    CartRequest cartRes = restTemplate.getForObject(User_SERVICE_URL + "/validate?token=" + token, CartRequest.class);
	    
	    req.setUserId(cartRes.getUserId());
	    restTemplate.put(url, req);
	    
	    return ResponseEntity.ok("Quantity updated successfully");
	}
	
	public ResponseEntity<?> deleteItem(String token, ProductId productId) {
	    String url = CART_SERVICE_URL + "/remove";
	    
	    // Validate user token
	    CartRequest cartRes = restTemplate.getForObject(User_SERVICE_URL + "/validate?token=" + token, CartRequest.class);
	    if (cartRes == null) {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid token");
	    }

	    // Perform the delete operation
	    try {
	        restTemplate.delete(url + "?userId=" + cartRes.getUserId() + "?productId=" + productId.getProductId() + "&categoryId=" + productId.getCategoryId());
	        return ResponseEntity.ok("Item deleted successfully");
	    } catch (Exception e) {
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error deleting item");
	    }
	}

}
