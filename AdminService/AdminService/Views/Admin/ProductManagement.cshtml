@model List<AdminService.Models.Product>

@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
    ViewData["Title"] = "Admin Panel";
}

<div class="container">
    <h2 class="text-center text-primary mb-4">Products List</h2>

    <div class="d-flex justify-content-between mb-3">
        <a href="/Admin/AddProduct" class="btn btn-success">+ Add Product</a>
        <input type="text" id="searchQuery" class="form-control w-25" placeholder="Search products by Product Name" onkeyup="searchProduct()">
    </div>

    <div class="table-responsive">
        <table class="table table-bordered table-hover text-center">
            <thead class="table-primary">
                <tr>
                    <th>Product ID</th>
                    <th>Product Name</th>
                    <th>Category ID</th>
                    <th>Price</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="productTableBody">
                <tr>
                    <td colspan="5" class="no-products">Loading products...</td>
                </tr>
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <div id="pagination"></div>
</div>

<!-- Local Bootstrap JS -->
<script src="~/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Global variables for pagination and filtering
    var allProducts = [];        // The complete list of products from the server
    var filteredProducts = [];   // The filtered list (based on search)
    var currentPage = 1;         // Current page number
    var productsPerPage = 10;    // Number of products per page

    $(document).ready(function () {
        fetchProducts();

        // Fetch the product list from the server
        function fetchProducts() {
            $.ajax({
                url: "/Admin/GetProducts",
                type: "GET",
                success: function (data) {
                    allProducts = data;
                    // Initially, no filter is applied.
                    filteredProducts = data;
                    if (!Array.isArray(allProducts) || allProducts.length === 0) {
                        $("#productTableBody").html("<tr><td colspan='5' class='no-products'>No products found.</td></tr>");
                        $("#pagination").empty();
                    } else {
                        displayPage(1);
                        createPagination();
                    }
                },
                error: function () {
                    $("#productTableBody").html("<tr><td colspan='5' class='no-products'>Error loading products.</td></tr>");
                    $("#pagination").empty();
                }
            });
        }

        // Function to display products for the given page using filteredProducts
        function displayPage(page) {
            currentPage = page;
            var startIndex = (page - 1) * productsPerPage;
            var endIndex = startIndex + productsPerPage;
            var productsToDisplay = filteredProducts.slice(startIndex, endIndex);

            let tableBody = $("#productTableBody");
            tableBody.empty();

            if (productsToDisplay.length === 0) {
                tableBody.append("<tr><td colspan='5' class='no-products'>No products found.</td></tr>");
                return;
            }

            productsToDisplay.forEach(product => {
                // Adjust property access based on your actual data structure
                let productId = product.productId?.productId ?? "N/A";
                let categoryId = product.productId?.categoryId ?? "N/A";
                let productName = product.name ?? "N/A";
                let price = product.price ?? 0;

                let row = `
                    <tr class="product-row">
                        <td>${productId}</td>
                        <td class="product-name">${productName}</td>
                        <td>${categoryId}</td>
                        <td>₹${price.toFixed(2)}</td>
                        <td>
                            <a href="/Admin/EditProduct/${categoryId}/${productId}" class="btn btn-primary btn-sm">Edit</a>
                            <button class="btn btn-danger btn-sm deleteProduct" data-categoryid="${categoryId}" data-productid="${productId}">Delete</button>
                        </td>
                    </tr>
                `;
                tableBody.append(row);
            });
        }

        // Function to create pagination controls based on filteredProducts
        function createPagination() {
            var totalPages = Math.ceil(filteredProducts.length / productsPerPage);
            var paginationHTML = '<nav><ul class="pagination justify-content-center">';

            // Previous button
            paginationHTML += `<li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                                  <a class="page-link" href="#" data-page="${currentPage - 1}">Previous</a>
                               </li>`;
            // Page number links
            for (var i = 1; i <= totalPages; i++) {
                paginationHTML += `<li class="page-item ${currentPage === i ? 'active' : ''}">
                                      <a class="page-link" href="#" data-page="${i}">${i}</a>
                                   </li>`;
            }
            // Next button
            paginationHTML += `<li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                                  <a class="page-link" href="#" data-page="${currentPage + 1}">Next</a>
                               </li>`;
            paginationHTML += '</ul></nav>';
            $("#pagination").html(paginationHTML);
        }

        // Handle clicks on pagination links
        $(document).on("click", ".pagination a", function (e) {
            e.preventDefault();
            var page = parseInt($(this).data("page"));
            var totalPages = Math.ceil(filteredProducts.length / productsPerPage);
            if (page < 1 || page > totalPages) return;
            displayPage(page);
            createPagination();
        });

        // Delete Product Confirmation and action remains unchanged
        $(document).on("click", ".deleteProduct", function () {
            var categoryId = $(this).data("categoryid");
            var productId = $(this).data("productid");

            if (confirm("Are you sure you want to delete this product?")) {
                $.ajax({
                    url: `/Admin/DeleteProduct/${categoryId}/${productId}`,
                    type: "POST",
                    success: function (response) {
                        alert("✅ Product deleted successfully!");
                        fetchProducts(); // Reload products and reapply filters/pagination if needed
                    },
                    error: function () {
                        alert("❌ Failed to delete product. Please try again.");
                    }
                });
            }
        });

        // Bind the search input event
        $("#searchQuery").on("keyup", function () {
            var query = $(this).val().toLowerCase();

            // Filter allProducts based on the product name
            if (query) {
                filteredProducts = allProducts.filter(product => {
                    return product.name && product.name.toLowerCase().includes(query);
                });
            } else {
                // If the search box is cleared, reset the filteredProducts to allProducts
                filteredProducts = allProducts;
            }

            // After filtering, display the first page and update pagination accordingly.
            displayPage(1);
            createPagination();
        });
    });
</script>

